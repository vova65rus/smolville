const express = require('express');
const axios = require('axios');
const multer = require('multer');
const fs = require('fs');
const FormData = require('form-data');
const path = require('path');

const app = express();
const port = process.env.PORT || 3000;

// Middleware –¥–ª—è CORS
app.use((req, res, next) => {
  res.header('Access-Control-Allow-Origin', '*');
  res.header('Access-Control-Allow-Methods', 'GET, POST, PUT, PATCH, DELETE, OPTIONS');
  res.header('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept, Authorization');
  
  if (req.method === 'OPTIONS') {
    return res.sendStatus(200);
  }
  next();
});

app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true, limit: '10mb' }));

const upload = multer({ 
  dest: 'uploads/',
  limits: {
    fileSize: 10 * 1024 * 1024,
  }
});

// ==================== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ====================

const SEATABLE_API_TOKEN = process.env.SEATABLE_API_TOKEN;
const SEATABLE_BASE_UUID = '1e24960e-ac5a-43b6-8269-e6376b16577a'; // –í–∞—à UUID –±–∞–∑—ã
const SEATABLE_SERVER_URL = 'https://cloud.seatable.io';
const EVENTS_TABLE = 'Events';
const ADS_TABLE = 'Ads'; 
const VOTINGS_TABLE = 'Votings';
const RADIKAL_API_URL = 'https://radikal.cloud/api/1';
const RADIKAL_API_KEY = process.env.RADIKAL_API_KEY;
const ADMIN_ID = 366825437;

// ==================== SeaTable API ====================

class SeaTableAPI {
  constructor(serverUrl, apiToken, baseUUID) {
    this.baseURL = `${serverUrl}/api/v2.1/dtable/app-api/${baseUUID}`;
    this.apiToken = apiToken;
  }

  getHeaders() {
    return {
      'Authorization': `Token ${this.apiToken}`,
      'Content-Type': 'application/json'
    };
  }

  async makeRequest(method, endpoint, data = null) {
    try {
      const url = `${this.baseURL}${endpoint}`;
      console.log(`üåä SeaTable API: ${method} ${url}`);
      
      const config = {
        method,
        url,
        headers: this.getHeaders(),
        timeout: 10000
      };

      if (data) {
        config.data = data;
      }

      const response = await axios(config);
      console.log(`‚úÖ SeaTable API —É—Å–ø–µ—à–Ω–æ: ${method} ${endpoint}`);
      return response.data;
      
    } catch (error) {
      console.error(`‚ùå SeaTable API –æ—à–∏–±–∫–∞:`, error.message);
      if (error.response) {
        console.error('–°—Ç–∞—Ç—É—Å:', error.response.status);
        console.error('–î–∞–Ω–Ω—ã–µ:', error.response.data);
      }
      throw error;
    }
  }

  async listRows(tableName) {
    return this.makeRequest('GET', `/rows/?table_name=${encodeURIComponent(tableName)}`);
  }

  async insertRow(tableName, rowData) {
    return this.makeRequest('POST', '/rows/', {
      table_name: tableName,
      row: rowData
    });
  }

  async updateRow(tableName, rowId, rowData) {
    return this.makeRequest('PUT', '/rows/', {
      table_name: tableName,
      row_id: rowId,
      row: rowData
    });
  }

  async deleteRow(tableName, rowId) {
    return this.makeRequest('DELETE', '/rows/', {
      table_name: tableName,
      row_id: rowId
    });
  }
}

// ==================== –ì–õ–ê–í–ù–ê–Ø –°–¢–†–ê–ù–ò–¶–ê ====================

app.get('/', (req, res) => {
  res.send(`
    <html>
      <head><title>Smolville - –§–ò–ù–ê–õ–¨–ù–ê–Ø –ù–ê–°–¢–†–û–ô–ö–ê</title></head>
      <body>
        <h1>üîß –§–ò–ù–ê–õ–¨–ù–ê–Ø –ù–ê–°–¢–†–û–ô–ö–ê SMOLVILLE</h1>
        
        <div style="background: #e8f5e8; padding: 20px; border-radius: 10px; margin: 20px 0;">
          <h2 style="color: #2e7d32;">‚úÖ –ë–ê–ó–ê –ò –¢–ê–ë–õ–ò–¶–´ –ì–û–¢–û–í–´!</h2>
          <p><strong>UUID –±–∞–∑—ã:</strong> ${SEATABLE_BASE_UUID}</p>
          <p><strong>–¢–∞–±–ª–∏—Ü—ã:</strong> Events, Ads, Votings (–ø–æ 0 –∑–∞–ø–∏—Å–µ–π)</p>
        </div>

        <h2>üéØ –°–û–ó–î–ê–ô–¢–ï API –¢–û–ö–ï–ù –ü–†–ê–í–ò–õ–¨–ù–û:</h2>
        
        <div style="border: 2px solid #2196f3; padding: 15px; border-radius: 8px; margin: 15px 0;">
          <h3>–®–∞–≥ 1: –û—Ç–∫—Ä–æ–π—Ç–µ —Ç–∞–±–ª–∏—Ü—É</h3>
          <p>–û—Ç–∫—Ä–æ–π—Ç–µ –ª—é–±—É—é —Ç–∞–±–ª–∏—Ü—É –≤ –±–∞–∑–µ Smolville:</p>
          <ul>
            <li><a href="https://cloud.seatable.io/workspace/89387/dtable/Smolville/?tid=0DSB&vid=0000" target="_blank">–¢–∞–±–ª–∏—Ü–∞ Events</a></li>
            <li><a href="https://cloud.seatable.io/workspace/89387/dtable/Smolville/?tid=ZV18&vid=0000" target="_blank">–¢–∞–±–ª–∏—Ü–∞ Votings</a></li>
            <li><a href="https://cloud.seatable.io/workspace/89387/dtable/Smolville/?tid=Gf71&vid=0000" target="_blank">–¢–∞–±–ª–∏—Ü–∞ Ads</a></li>
          </ul>
        </div>

        <div style="border: 2px solid #4caf50; padding: 15px; border-radius: 8px; margin: 15px 0;">
          <h3>–®–∞–≥ 2: –°–æ–∑–¥–∞–π—Ç–µ API —Ç–æ–∫–µ–Ω</h3>
          <ol>
            <li>–í –æ—Ç–∫—Ä—ã—Ç–æ–π —Ç–∞–±–ª–∏—Ü–µ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ <strong>—à–µ—Å—Ç–µ—Ä–µ–Ω–∫—É</strong> —Ä—è–¥–æ–º —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º —Ç–∞–±–ª–∏—Ü—ã</li>
            <li>–í—ã–±–µ—Ä–∏—Ç–µ <strong>"–í–Ω–µ—à–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"</strong></li>
            <li>–ù–∞–∂–º–∏—Ç–µ <strong>"API —Ç–æ–∫–µ–Ω"</strong></li>
            <li>–ù–∞–∂–º–∏—Ç–µ <strong>"–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π API —Ç–æ–∫–µ–Ω"</strong></li>
            <li>–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ç–æ–∫–µ–Ω</li>
          </ol>
        </div>

        <div style="border: 2px solid #ff9800; padding: 15px; border-radius: 8px; margin: 15px 0;">
          <h3>–®–∞–≥ 3: –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ —Ç–æ–∫–µ–Ω</h3>
          <form action="/api/test-token" method="get" style="margin: 10px 0;">
            <input type="text" name="token" placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–≤—ã–π API —Ç–æ–∫–µ–Ω" 
                   style="width: 400px; padding: 10px; font-size: 16px;" required>
            <button type="submit" style="padding: 10px 20px; font-size: 16px;">–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å</button>
          </form>
          <p>–ò–ª–∏: <a href="/api/test-current">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Ç–æ–∫–µ–Ω</a></p>
        </div>

        <div style="border: 2px solid #9c27b0; padding: 15px; border-radius: 8px; margin: 15px 0;">
          <h3>–®–∞–≥ 4: –î–æ–±–∞–≤—å—Ç–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ</h3>
          <p>–ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞:</p>
          <ul>
            <li><a href="/api/add-test-data">–î–æ–±–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏</a></li>
            <li>–ò–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤—Ä—É—á–Ω—É—é —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å SeaTable</li>
          </ul>
        </div>

        <h3>üìä –°—Ç–∞—Ç—É—Å:</h3>
        <ul>
          <li><a href="/api/status">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –±–∞–∑—ã</a></li>
          <li><a href="/health">Health check</a></li>
        </ul>
      </body>
    </html>
  `);
});

// ==================== API –≠–ù–î–ü–û–ò–ù–¢–´ ====================

// –¢–µ—Å—Ç —Ç–µ–∫—É—â–µ–≥–æ —Ç–æ–∫–µ–Ω–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
app.get('/api/test-current', async (req, res) => {
  if (!SEATABLE_API_TOKEN) {
    return res.json({
      success: false,
      error: 'SEATABLE_API_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ Render'
    });
  }

  try {
    const seatableAPI = new SeaTableAPI(SEATABLE_SERVER_URL, SEATABLE_API_TOKEN, SEATABLE_BASE_UUID);
    const data = await seatableAPI.listRows(EVENTS_TABLE);
    
    res.json({
      success: true,
      message: '‚úÖ –¢–ï–ö–£–©–ò–ô –¢–û–ö–ï–ù –†–ê–ë–û–¢–ê–ï–¢!',
      eventsCount: data.rows ? data.rows.length : 0,
      config: {
        token: `${SEATABLE_API_TOKEN.substring(0, 8)}...`,
        uuid: SEATABLE_BASE_UUID
      }
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      error: error.message,
      instructions: [
        '–¢–µ–∫—É—â–∏–π —Ç–æ–∫–µ–Ω –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç',
        '–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π API —Ç–æ–∫–µ–Ω —Å–ª–µ–¥—É—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ',
        '–û–±–Ω–æ–≤–∏—Ç–µ SEATABLE_API_TOKEN –≤ Render'
      ]
    });
  }
});

// –¢–µ—Å—Ç —Å —Ä—É—á–Ω—ã–º –≤–≤–æ–¥–æ–º —Ç–æ–∫–µ–Ω–∞
app.get('/api/test-token', async (req, res) => {
  const token = req.query.token;

  if (!token) {
    return res.json({
      error: '–£–∫–∞–∂–∏—Ç–µ —Ç–æ–∫–µ–Ω: /api/test-token?token=–í–ê–®_–¢–û–ö–ï–ù'
    });
  }

  try {
    const seatableAPI = new SeaTableAPI(SEATABLE_SERVER_URL, token, SEATABLE_BASE_UUID);
    const data = await seatableAPI.listRows(EVENTS_TABLE);
    
    res.json({
      success: true,
      message: '‚úÖ –ù–û–í–´–ô –¢–û–ö–ï–ù –†–ê–ë–û–¢–ê–ï–¢!',
      eventsCount: data.rows ? data.rows.length : 0,
      config: {
        token: `${token.substring(0, 8)}...`,
        uuid: SEATABLE_BASE_UUID
      },
      nextSteps: [
        `–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤ Render: SEATABLE_API_TOKEN=${token}`,
        '–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
        '–î–æ–±–∞–≤—å—Ç–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ'
      ]
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      error: error.message,
      instructions: [
        '–¢–æ–∫–µ–Ω –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π:',
        '1. –û—Ç–∫—Ä–æ–π—Ç–µ —Ç–∞–±–ª–∏—Ü—É Events, Ads –∏–ª–∏ Votings',
        '2. –®–µ—Å—Ç–µ—Ä–µ–Ω–∫–∞ ‚Üí –í–Ω–µ—à–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ‚Üí API —Ç–æ–∫–µ–Ω',
        '3. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω',
        '4. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ —Å–Ω–æ–≤–∞'
      ]
    });
  }
});

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
app.get('/api/add-test-data', async (req, res) => {
  const token = req.query.token || SEATABLE_API_TOKEN;

  if (!token) {
    return res.json({
      error: '–£–∫–∞–∂–∏—Ç–µ —Ç–æ–∫–µ–Ω: /api/add-test-data?token=–í–ê–®_–¢–û–ö–ï–ù'
    });
  }

  try {
    const seatableAPI = new SeaTableAPI(SEATABLE_SERVER_URL, token, SEATABLE_BASE_UUID);
    const results = {};

    // –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ
    try {
      const event = await seatableAPI.insertRow(EVENTS_TABLE, {
        '–ù–∞–∑–≤–∞–Ω–∏–µ': '–§–µ—Å—Ç–∏–≤–∞–ª—å Smolville',
        '–û–ø–∏—Å–∞–Ω–∏–µ': '–ì–ª–∞–≤–Ω–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –≥–æ–¥–∞ –≤ Smolville',
        '–î–∞—Ç–∞': '2024-10-15',
        '–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ': '–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –ø–ª–æ—â–∞–¥—å',
        'AttendeesCount': 0,
        'AttendeesIDs': '',
        '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ': ''
      });
      results.events = { success: true, id: event._id };
    } catch (error) {
      results.events = { success: false, error: error.message };
    }

    // –¢–µ—Å—Ç–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
    try {
      const ad = await seatableAPI.insertRow(ADS_TABLE, {
        '–ó–∞–≥–æ–ª–æ–≤–æ–∫': '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Smolville!',
        '–¢–µ–∫—Å—Ç': '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –Ω–∞—à–µ–º—É —Å–æ–æ–±—â–µ—Å—Ç–≤—É',
        '–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞': '2024-10-01',
        '–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è': '2024-12-31',
        '–ê–∫—Ç–∏–≤–Ω–æ': true
      });
      results.ads = { success: true, id: ad._id };
    } catch (error) {
      results.ads = { success: false, error: error.message };
    }

    // –¢–µ—Å—Ç–æ–≤–æ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
    try {
      const voting = await seatableAPI.insertRow(VOTINGS_TABLE, {
        '–í–æ–ø—Ä–æ—Å': '–ß—Ç–æ —É–ª—É—á—à–∏—Ç—å –≤ Smolville?',
        '–í–∞—Ä–∏–∞–Ω—Ç—ã': '–ü–∞—Ä–∫–∏,–î–æ—Ä–æ–≥–∏,–û—Å–≤–µ—â–µ–Ω–∏–µ,–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è',
        '–°—Ç–∞—Ç—É—Å': 'Active',
        'Votes': '{}',
        'VotedUserIDs': '',
        'EventID': ''
      });
      results.votings = { success: true, id: voting._id };
    } catch (error) {
      results.votings = { success: false, error: error.message };
    }

    res.json({
      message: '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–æ',
      results: results,
      success: Object.values(results).every(r => r.success)
    });

  } catch (error) {
    res.status(500).json({
      error: error.message
    });
  }
});

// –°—Ç–∞—Ç—É—Å –±–∞–∑—ã
app.get('/api/status', async (req, res) => {
  const token = req.query.token || SEATABLE_API_TOKEN;

  if (!token) {
    return res.json({
      error: '–£–∫–∞–∂–∏—Ç–µ —Ç–æ–∫–µ–Ω: /api/status?token=–í–ê–®_–¢–û–ö–ï–ù'
    });
  }

  try {
    const seatableAPI = new SeaTableAPI(SEATABLE_SERVER_URL, token, SEATABLE_BASE_UUID);
    const tables = [EVENTS_TABLE, ADS_TABLE, VOTINGS_TABLE];
    const status = {};

    for (const table of tables) {
      try {
        const data = await seatableAPI.listRows(table);
        status[table] = {
          exists: true,
          rowCount: data.rows ? data.rows.length : 0,
          columns: data.rows && data.rows.length > 0 ? Object.keys(data.rows[0]) : []
        };
      } catch (error) {
        status[table] = {
          exists: false,
          error: error.message
        };
      }
    }

    res.json({
      baseUUID: SEATABLE_BASE_UUID,
      status: status,
      token: `${token.substring(0, 8)}...`
    });

  } catch (error) {
    res.status(500).json({
      error: error.message
    });
  }
});

// Health check
app.get('/health', (req, res) => {
  res.json({ 
    status: 'READY',
    baseUUID: SEATABLE_BASE_UUID,
    hasApiToken: !!SEATABLE_API_TOKEN,
    timestamp: new Date().toISOString()
  });
});

// ==================== –û–°–ù–û–í–ù–´–ï API (–±—É–¥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ–∫–µ–Ω–∞) ====================

app.get('/api/events', async (req, res) => {
  if (!SEATABLE_API_TOKEN) {
    return res.status(500).json({ error: 'API —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω' });
  }

  try {
    const seatableAPI = new SeaTableAPI(SEATABLE_SERVER_URL, SEATABLE_API_TOKEN, SEATABLE_BASE_UUID);
    const data = await seatableAPI.listRows(EVENTS_TABLE);
    res.json({ 
      records: data.rows.map(row => ({ id: row._id, fields: row }))
    });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

app.get('/api/ads', async (req, res) => {
  if (!SEATABLE_API_TOKEN) {
    return res.status(500).json({ error: 'API —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω' });
  }

  try {
    const seatableAPI = new SeaTableAPI(SEATABLE_SERVER_URL, SEATABLE_API_TOKEN, SEATABLE_BASE_UUID);
    const data = await seatableAPI.listRows(ADS_TABLE);
    res.json({ 
      records: data.rows.map(row => ({ id: row._id, fields: row }))
    });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

app.get('/api/votings', async (req, res) => {
  if (!SEATABLE_API_TOKEN) {
    return res.status(500).json({ error: 'API —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω' });
  }

  try {
    const seatableAPI = new SeaTableAPI(SEATABLE_SERVER_URL, SEATABLE_API_TOKEN, SEATABLE_BASE_UUID);
    const data = await seatableAPI.listRows(VOTINGS_TABLE);
    res.json({ 
      records: data.rows.map(row => ({ id: row._id, fields: row }))
    });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// Upload endpoint
app.post('/api/upload', upload.single('image'), async (req, res) => {
  try {
    if (!req.file) {
      return res.status(400).json({ error: '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ' });
    }
    
    if (!RADIKAL_API_KEY) {
      return res.status(500).json({ error: 'RADIKAL_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' });
    }
    
    const filePath = req.file.path;
    const fileBuffer = fs.readFileSync(filePath);
    
    const formData = new FormData();
    formData.append('source', fileBuffer, {
      filename: req.file.originalname || `upload_${Date.now()}.jpg`,
      contentType: req.file.mimetype
    });

    const response = await axios.post(`${RADIKAL_API_URL}/upload`, formData, {
      headers: {
        'X-API-Key': RADIKAL_API_KEY,
        ...formData.getHeaders(),
      },
      timeout: 30000
    });

    const imageData = response.data.image || response.data;
    const url = imageData.url || imageData.image_url;
    
    if (!url) {
      throw new Error('URL –Ω–µ –ø–æ–ª—É—á–µ–Ω –æ—Ç Radikal API');
    }

    // –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    try {
      fs.unlinkSync(filePath);
    } catch (unlinkError) {
      console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞:', unlinkError.message);
    }
    
    res.json({ 
      url: url,
      fileId: imageData.id_encoded || imageData.name
    });
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', error.message);
    if (req.file) {
      try {
        fs.unlinkSync(req.file.path);
      } catch (unlinkError) {
        console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞:', unlinkError.message);
      }
    }
    res.status(500).json({ error: error.message });
  }
});

app.get('/api/is-admin', (req, res) => {
  const userId = parseInt(req.query.userId, 10);
  const isAdmin = userId === ADMIN_ID;
  res.json({ isAdmin });
});

app.listen(port, () => {
  console.log(`üöÄ –°–ï–†–í–ï–† –ó–ê–ü–£–©–ï–ù –ù–ê –ü–û–†–¢–£ ${port}`);
  console.log(`üîó UUID –±–∞–∑—ã: ${SEATABLE_BASE_UUID}`);
  console.log(`üîë –¢–æ–∫–µ–Ω: ${SEATABLE_API_TOKEN ? '—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù'}`);
  console.log('');
  console.log('üìã –ò–ù–°–¢–†–£–ö–¶–ò–Ø:');
  console.log('1. –û—Ç–∫—Ä–æ–π—Ç–µ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É');
  console.log('2. –°–æ–∑–¥–∞–π—Ç–µ API —Ç–æ–∫–µ–Ω –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã');
  console.log('3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ —Ç–æ–∫–µ–Ω');
  console.log('4. –û–±–Ω–æ–≤–∏—Ç–µ SEATABLE_API_TOKEN –≤ Render');
});
