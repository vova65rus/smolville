const express = require('express');
const axios = require('axios');

const app = express();
const port = process.env.PORT || 3000;

app.use((req, res, next) => {
  res.header('Access-Control-Allow-Origin', '*');
  res.header('Access-Control-Allow-Methods', 'GET, POST, PUT, PATCH, DELETE, OPTIONS');
  res.header('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept, Authorization');
  if (req.method === 'OPTIONS') return res.sendStatus(200);
  next();
});

app.use(express.json());

const SEATABLE_API_TOKEN = 'a59ff211027552fe077f2a1baed66d831cf96cbf';
const SEA_TABLE_BASE_UUID = '1e24960e-ac5a-43b6-8269-e6376b16577a';

app.get('/', (req, res) => {
  res.send(`
    <html>
      <head><title>SeaTable API Diagnostic</title></head>
      <body>
        <h1>üîß –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ SeaTable API</h1>
        <p><strong>–ü—Ä–æ–±–ª–µ–º–∞:</strong> SeaTable –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç HTML –≤–º–µ—Å—Ç–æ JSON</p>
        
        <h2>–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:</h2>
        <ol>
          <li>API —Ç–æ–∫–µ–Ω —Å–æ–∑–¥–∞–Ω –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ</li>
          <li>Base UUID –Ω–µ–≤–µ—Ä–Ω—ã–π</li>
          <li>–¢–∞–±–ª–∏—Ü—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç</li>
          <li>–ù–µ–≤–µ—Ä–Ω—ã–π API endpoint</li>
        </ol>

        <h3>–¢–µ—Å—Ç—ã:</h3>
        <ul>
          <li><a href="/api/test-endpoints">/api/test-endpoints</a> - –¢–µ—Å—Ç –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö endpoints</li>
          <li><a href="/api/check-token">/api/check-token</a> - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞</li>
          <li><a href="/api/create-token-instructions">/api/create-token-instructions</a> - –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é —Ç–æ–∫–µ–Ω–∞</li>
        </ul>
      </body>
    </html>
  `);
});

// –¢–µ—Å—Ç –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö API endpoints
app.get('/api/test-endpoints', async (req, res) => {
  const endpoints = [
    // –û—Å–Ω–æ–≤–Ω—ã–µ endpoints
    `https://cloud.seatable.io/api/v2.1/dtable/app-api/${SEA_TABLE_BASE_UUID}/rows/?table_name=Events`,
    `https://cloud.seatable.io/dtable-server/api/v1/dtables/${SEA_TABLE_BASE_UUID}/rows/?table_name=Events`,
    
    // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ endpoints
    `https://cloud.seatable.io/api/v2.1/dtables/${SEA_TABLE_BASE_UUID}/rows/?table_name=Events`,
    `https://cloud.seatable.io/api/v2.1/dtable/app-api/rows/?table_name=Events&dtable_uuid=${SEA_TABLE_BASE_UUID}`,
    
    // Base name –≤–º–µ—Å—Ç–æ UUID
    `https://cloud.seatable.io/api/v2.1/dtable/app-api/Smolville/rows/?table_name=Events`,
    
    // –°—Ç–∞—Ä—ã–µ endpoints
    `https://cloud.seatable.io/dtable-server/api/v1/rows/?table_name=Events&dtable_uuid=${SEA_TABLE_BASE_UUID}`
  ];

  const results = [];

  for (const endpoint of endpoints) {
    try {
      console.log(`üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º: ${endpoint}`);
      
      const response = await axios.get(endpoint, {
        headers: {
          'Authorization': `Token ${SEATABLE_API_TOKEN}`,
          'Content-Type': 'application/json'
        },
        timeout: 5000
      });

      results.push({
        endpoint: endpoint,
        status: 'SUCCESS',
        statusCode: response.status,
        dataType: typeof response.data,
        hasRows: response.data.rows ? true : false,
        rowCount: response.data.rows ? response.data.rows.length : 0
      });

    } catch (error) {
      let errorType = 'UNKNOWN';
      if (error.response) {
        if (typeof error.response.data === 'string' && error.response.data.includes('<!DOCTYPE html>')) {
          errorType = 'HTML_RESPONSE';
        } else if (error.response.status === 404) {
          errorType = 'NOT_FOUND';
        } else if (error.response.status === 403) {
          errorType = 'FORBIDDEN';
        }
      }

      results.push({
        endpoint: endpoint,
        status: 'ERROR',
        errorType: errorType,
        statusCode: error.response?.status,
        error: error.message
      });
    }
  }

  res.json({
    config: {
      apiToken: `${SEATABLE_API_TOKEN.substring(0, 8)}...`,
      baseUUID: SEA_TABLE_BASE_UUID
    },
    results: results,
    analysis: {
      totalTests: results.length,
      successCount: results.filter(r => r.status === 'SUCCESS').length,
      htmlResponses: results.filter(r => r.errorType === 'HTML_RESPONSE').length
    }
  });
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ —á–µ—Ä–µ–∑ Account API
app.get('/api/check-token', async (req, res) => {
  try {
    // –ü–æ–ø—Ä–æ–±—É–µ–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ —Ä–∞–∑–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    
    const tests = [
      {
        name: 'Base API Access',
        url: `https://cloud.seatable.io/api/v2.1/dtable/app-api/${SEA_TABLE_BASE_UUID}/`
      },
      {
        name: 'Workspace List',
        url: 'https://cloud.seatable.io/api/v2.1/workspaces/'
      },
      {
        name: 'Account Info',
        url: 'https://cloud.seatable.io/api/v2.1/account/info/'
      }
    ];

    const results = [];

    for (const test of tests) {
      try {
        const response = await axios.get(test.url, {
          headers: {
            'Authorization': `Token ${SEATABLE_API_TOKEN}`,
            'Content-Type': 'application/json'
          },
          timeout: 5000
        });

        results.push({
          test: test.name,
          status: 'SUCCESS',
          statusCode: response.status,
          data: Object.keys(response.data)
        });

      } catch (error) {
        results.push({
          test: test.name,
          status: 'ERROR',
          statusCode: error.response?.status,
          error: error.message
        });
      }
    }

    res.json({
      token: `${SEATABLE_API_TOKEN.substring(0, 8)}...`,
      results: results,
      conclusion: results.some(r => r.status === 'SUCCESS') ? 
        '–¢–æ–∫–µ–Ω –≤–∞–ª–∏–¥–Ω—ã–π, –Ω–æ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –±–∞–∑–µ' : 
        '–¢–æ–∫–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π'
    });

  } catch (error) {
    res.status(500).json({
      error: error.message
    });
  }
});

// –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é —Ç–æ–∫–µ–Ω–∞
app.get('/api/create-token-instructions', (req, res) => {
  res.json({
    steps: [
      {
        step: 1,
        action: '–û—Ç–∫—Ä–æ–π—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –≤ –±–∞–∑–µ Smolville',
        details: '–ù–ï –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã, –∞ –æ—Ç–∫—Ä–æ–π—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ —Ç–∞–±–ª–∏—Ü—É Events, Ads –∏–ª–∏ Votings'
      },
      {
        step: 2,
        action: '–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —à–µ—Å—Ç–µ—Ä–µ–Ω–∫—É —Ä—è–¥–æ–º —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º —Ç–∞–±–ª–∏—Ü—ã',
        details: '–≠—Ç–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∞–±–ª–∏—Ü—ã, –∞ –Ω–µ –±–∞–∑—ã'
      },
      {
        step: 3, 
        action: '–í—ã–±–µ—Ä–∏—Ç–µ "–í–Ω–µ—à–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"',
        details: '–í –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ç–∞–±–ª–∏—Ü—ã'
      },
      {
        step: 4,
        action: '–ù–∞–∂–º–∏—Ç–µ "API —Ç–æ–∫–µ–Ω"',
        details: '–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω'
      },
      {
        step: 5,
        action: '–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Ç–æ–∫–µ–Ω —Å–æ–∑–¥–∞–Ω –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã',
        details: '–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å —É–∫–∞–∑–∞–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ Events/Ads/Votings'
      }
    ],
    commonMistakes: [
      '–°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –±–∞–∑—ã –≤–º–µ—Å—Ç–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ç–∞–±–ª–∏—Ü—ã',
      '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Account Token –≤–º–µ—Å—Ç–æ API Token',
      '–¢–æ–∫–µ–Ω —Å–æ–∑–¥–∞–Ω –¥–ª—è –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã',
      'Base UUID –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –±–∞–∑–µ'
    ],
    immediateAction: '–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π API —Ç–æ–∫–µ–Ω –æ—Ç–∫—Ä—ã–≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –∏ –∏—Å–ø–æ–ª—å–∑—É—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∞–±–ª–∏—Ü—ã (–Ω–µ –±–∞–∑—ã!)'
  });
});

// –¢–µ—Å—Ç —Å —Ä—É—á–Ω—ã–º –≤–≤–æ–¥–æ–º —Ç–æ–∫–µ–Ω–∞ –∏ UUID
app.get('/api/test-manual', async (req, res) => {
  const token = req.query.token || SEATABLE_API_TOKEN;
  const uuid = req.query.uuid || SEA_TABLE_BASE_UUID;
  const table = req.query.table || 'Events';

  if (!token || !uuid) {
    return res.json({
      error: '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /api/test-manual?token=–í–ê–®_–¢–û–ö–ï–ù&uuid=–í–ê–®_UUID&table=Events'
    });
  }

  try {
    const response = await axios.get(
      `https://cloud.seatable.io/api/v2.1/dtable/app-api/${uuid}/rows/?table_name=${table}`,
      {
        headers: {
          'Authorization': `Token ${token}`,
          'Content-Type': 'application/json'
        },
        timeout: 5000
      }
    );

    res.json({
      success: true,
      message: '‚úÖ –†–ê–ë–û–¢–ê–ï–¢!',
      config: {
        token: `${token.substring(0, 8)}...`,
        uuid: uuid,
        table: table
      },
      data: {
        rowCount: response.data.rows ? response.data.rows.length : 0,
        sample: response.data.rows ? response.data.rows.slice(0, 2) : []
      }
    });

  } catch (error) {
    res.status(500).json({
      success: false,
      error: error.message,
      config: {
        token: `${token.substring(0, 8)}...`,
        uuid: uuid,
        table: table
      },
      diagnosis: error.response?.status === 404 ? '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω, UUID –∏–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' : '–î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞'
    });
  }
});

app.listen(port, () => {
  console.log(`üöÄ –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${port}`);
  console.log(`üîó –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω: ${SEATABLE_API_TOKEN.substring(0, 8)}...`);
  console.log(`üîó Base UUID: ${SEA_TABLE_BASE_UUID}`);
  console.log('');
  console.log('üìã –î–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –æ—Ç–∫—Ä–æ–π—Ç–µ:');
  console.log('   /api/test-endpoints - —Ç–µ—Å—Ç –≤—Å–µ—Ö endpoints');
  console.log('   /api/check-token - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞');
  console.log('   /api/create-token-instructions - –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è');
});
