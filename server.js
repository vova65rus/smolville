const express = require('express');
const axios = require('axios');
const multer = require('multer');
const fs = require('fs');
const FormData = require('form-data');
const path = require('path');

const app = express();
const port = process.env.PORT || 3000;

// Middleware –¥–ª—è CORS
app.use((req, res, next) => {
  res.header('Access-Control-Allow-Origin', '*');
  res.header('Access-Control-Allow-Methods', 'GET, POST, PUT, PATCH, DELETE, OPTIONS');
  res.header('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept, Authorization');
  
  if (req.method === 'OPTIONS') {
    return res.sendStatus(200);
  }
  next();
});

app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true, limit: '10mb' }));

const upload = multer({ 
  dest: 'uploads/',
  limits: {
    fileSize: 10 * 1024 * 1024,
  }
});

// ==================== –ù–ê–°–¢–†–û–ô–ö–ò SEA TABLE ====================

// –í–ê–ñ–ù–û: –ü–æ–ª—É—á–∏—Ç–µ –Ω–æ–≤—ã–π API —Ç–æ–∫–µ–Ω –¥–ª—è –±–∞–∑—ã Smolville!
const SEATABLE_API_TOKEN = process.env.SEATABLE_API_TOKEN || '–í–ê–®_–ù–û–í–´–ô_API_–¢–û–ö–ï–ù_–ó–î–ï–°–¨';
const SEATABLE_SERVER_URL = process.env.SEATABLE_SERVER_URL || 'https://cloud.seatable.io';

// Base UUID - –∏–∑ URL –≤–∞—à–µ–π –±–∞–∑—ã
// –ò–∑ URL: https://cloud.seatable.io/workspace/89387/dtable/Smolville/?tid=Gf71&vid=0000
// Base UUID –æ–±—ã—á–Ω–æ –≤—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫ –¥–ª–∏–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å–∏–º–≤–æ–ª–æ–≤, –∞ –Ω–µ –∏–º—è –±–∞–∑—ã
const SEATABLE_BASE_UUID = process.env.SEATABLE_BASE_UUID || 'UUID_–í–ê–®–ï–ô_–ë–ê–ó–´_–ó–î–ï–°–¨';

// –ù–∞–∑–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü
const EVENTS_TABLE = process.env.SEATABLE_EVENTS_TABLE_NAME || 'Events';
const ADS_TABLE = process.env.SEATABLE_ADS_TABLE_NAME || 'Ads';
const VOTINGS_TABLE = process.env.SEATABLE_VOTINGS_TABLE_NAME || 'Votings';

// Radikal API –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const RADIKAL_API_URL = 'https://radikal.cloud/api/1';
const RADIKAL_API_KEY = process.env.RADIKAL_API_KEY;

// –•–∞—Ä–¥–∫–æ–¥ –∞–¥–º–∏–Ω–∞
const ADMIN_ID = 366825437;

if (!SEATABLE_API_TOKEN || !SEATABLE_BASE_UUID || !RADIKAL_API_KEY) {
  console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è');
  console.error('SEATABLE_API_TOKEN:', SEATABLE_API_TOKEN ? '–µ—Å—Ç—å' : '–ù–ï–¢');
  console.error('SEATABLE_BASE_UUID:', SEATABLE_BASE_UUID ? '–µ—Å—Ç—å' : '–ù–ï–¢');
  console.error('RADIKAL_API_KEY:', RADIKAL_API_KEY ? '–µ—Å—Ç—å' : '–ù–ï–¢');
  process.exit(1);
}

// ==================== SeaTable API ====================

class SeaTableAPI {
  constructor(serverUrl, apiToken, baseUUID) {
    this.baseURL = `${serverUrl}/api/v2.1/dtable/app-api/${baseUUID}`;
    this.apiToken = apiToken;
    this.baseUUID = baseUUID;
  }

  getHeaders() {
    return {
      'Authorization': `Token ${this.apiToken}`,
      'Content-Type': 'application/json'
    };
  }

  async makeRequest(method, endpoint, data = null) {
    try {
      const url = `${this.baseURL}${endpoint}`;
      console.log(`üåä SeaTable API: ${method} ${url}`);
      
      const config = {
        method,
        url,
        headers: this.getHeaders(),
        timeout: 10000
      };

      if (data) {
        config.data = data;
      }

      const response = await axios(config);
      console.log(`‚úÖ SeaTable API —É—Å–ø–µ—à–Ω–æ: ${method} ${endpoint}`);
      return response.data;
      
    } catch (error) {
      console.error(`‚ùå SeaTable API –æ—à–∏–±–∫–∞:`, error.message);
      
      if (error.response) {
        console.error('–°—Ç–∞—Ç—É—Å:', error.response.status);
        
        if (error.response.data) {
          const responseStr = JSON.stringify(error.response.data).substring(0, 200);
          console.error('–î–∞–Ω–Ω—ã–µ:', responseStr + '...');
        }
        
        if (error.response.status === 403) {
          throw new Error('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API —Ç–æ–∫–µ–Ω.');
        }
        if (error.response.status === 404) {
          throw new Error('–†–µ—Å—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Base UUID –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã.');
        }
      }
      
      if (error.code === 'ECONNABORTED') {
        throw new Error('–¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞. SeaTable –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç.');
      }
      
      throw error;
    }
  }

  async listRows(tableName) {
    return this.makeRequest('GET', `/rows/?table_name=${encodeURIComponent(tableName)}`);
  }

  async insertRow(tableName, rowData) {
    return this.makeRequest('POST', '/rows/', {
      table_name: tableName,
      row: rowData
    });
  }

  async updateRow(tableName, rowId, rowData) {
    return this.makeRequest('PUT', '/rows/', {
      table_name: tableName,
      row_id: rowId,
      row: rowData
    });
  }

  async deleteRow(tableName, rowId) {
    return this.makeRequest('DELETE', '/rows/', {
      table_name: tableName,
      row_id: rowId
    });
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API –∫–ª–∏–µ–Ω—Ç–∞
const seatableAPI = new SeaTableAPI(SEATABLE_SERVER_URL, SEATABLE_API_TOKEN, SEATABLE_BASE_UUID);

// ==================== –î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–ò–ï API ====================

app.get('/', (req, res) => {
  res.send(`
    <html>
      <head><title>Smolville Backend</title></head>
      <body>
        <h1>üöÄ Smolville Backend –∑–∞–ø—É—â–µ–Ω!</h1>
        <p>–î–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:</p>
        <ul>
          <li><a href="/api/debug/connection">/api/debug/connection</a> - –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è</li>
          <li><a href="/api/debug/env">/api/debug/env</a> - –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è</li>
          <li><a href="/api/debug/find-uuid">/api/debug/find-uuid</a> - –ü–æ–∏—Å–∫ UUID –±–∞–∑—ã</li>
        </ul>
      </body>
    </html>
  `);
});

// –ü–æ–∏—Å–∫ UUID –±–∞–∑—ã —Å –ø–æ–º–æ—â—å—é Account Token
app.get('/api/debug/find-uuid', async (req, res) => {
  try {
    const ACCOUNT_TOKEN = 'd146dc5b1b1fd51aafdbf5dbae1c00babf2f927d';
    
    console.log('üîç –ò—â–µ–º UUID –±–∞–∑—ã Smolville —á–µ—Ä–µ–∑ Account API...');
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤
    const workspacesResponse = await axios.get(
      'https://cloud.seatable.io/api/v2.1/workspace/',
      {
        headers: {
          'Authorization': `Token ${ACCOUNT_TOKEN}`,
          'Content-Type': 'application/json'
        },
        timeout: 10000
      }
    );

    let baseUUID = null;
    
    // –ò—â–µ–º –≤ –∫–∞–∂–¥–æ–º workspace –±–∞–∑—É Smolville
    for (const workspace of workspacesResponse.data.workspace_list) {
      try {
        const tablesResponse = await axios.get(
          `https://cloud.seatable.io/api/v2.1/workspace/${workspace.id}/dtable/`,
          {
            headers: {
              'Authorization': `Token ${ACCOUNT_TOKEN}`,
              'Content-Type': 'application/json'
            },
            timeout: 10000
          }
        );

        const smolvilleBase = tablesResponse.data.find(table => table.name === 'Smolville');
        if (smolvilleBase) {
          baseUUID = smolvilleBase.uuid;
          console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ –±–∞–∑–∞ Smolville: ${baseUUID}`);
          break;
        }
      } catch (error) {
        console.log(`‚ÑπÔ∏è Workspace ${workspace.id}: –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∏–ª–∏ –Ω–µ—Ç –±–∞–∑—ã`);
      }
    }

    if (baseUUID) {
      res.json({
        success: true,
        baseUUID: baseUUID,
        currentConfig: {
          apiToken: SEATABLE_API_TOKEN ? `—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (${SEATABLE_API_TOKEN.substring(0, 8)}...)` : '–ù–ï–¢',
          currentBaseUUID: SEATABLE_BASE_UUID,
          foundBaseUUID: baseUUID
        },
        instructions: [
          '1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–π UUID –±–∞–∑—ã',
          '2. –û–±–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é SEATABLE_BASE_UUID –≤ Render',
          '3. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ API Token (–Ω–µ Account Token)',
          '4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ /api/debug/connection'
        ]
      });
    } else {
      res.status(404).json({
        success: false,
        error: '–ë–∞–∑–∞ Smolville –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∞–∫–∫–∞—É–Ω—Ç–µ',
        instructions: [
          '1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–∞–∑–∞ Smolville —Å—É—â–µ—Å—Ç–≤—É–µ—Ç',
          '2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å Account Token',
          '3. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π API Token –¥–ª—è –±–∞–∑—ã Smolville'
        ]
      });
    }
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ UUID:', error.message);
    res.status(500).json({
      success: false,
      error: error.message,
      instructions: [
        '1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Account Token',
        '2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–∞–∑–∞ Smolville —Å—É—â–µ—Å—Ç–≤—É–µ—Ç',
        '3. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π API Token –¥–ª—è –±–∞–∑—ã'
      ]
    });
  }
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
app.get('/api/debug/connection', async (req, res) => {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ SeaTable...');
    
    const testData = await seatableAPI.listRows(EVENTS_TABLE);
    
    res.json({
      success: true,
      message: '‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SeaTable —É—Å–ø–µ—à–Ω–æ!',
      details: {
        baseUUID: SEATABLE_BASE_UUID,
        baseURL: `${SEATABLE_SERVER_URL}/api/v2.1/dtable/app-api/${SEATABLE_BASE_UUID}`,
        tables: {
          events: testData.rows ? testData.rows.length : 0
        }
      }
    });
    
  } catch (error) {
    res.status(500).json({
      success: false,
      error: error.message,
      details: {
        baseUUID: SEATABLE_BASE_UUID,
        baseURL: `${SEATABLE_SERVER_URL}/api/v2.1/dtable/app-api/${SEATABLE_BASE_UUID}`,
        apiToken: SEATABLE_API_TOKEN ? '—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'
      },
      troubleshooting: [
        '1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /api/debug/find-uuid —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π UUID –±–∞–∑—ã',
        '2. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π API Token –¥–ª—è –±–∞–∑—ã Smolville',
        '3. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ç–∞–±–ª–∏—Ü–∞ "Events" —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ'
      ]
    });
  }
});

// –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ (Events, Ads, Votings API) –æ—Å—Ç–∞–µ—Ç—Å—è —Ç–∞–∫–∏–º –∂–µ...
// [–ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Å—Ç–∞–ª—å–Ω–æ–π –≤–∞—à –∫–æ–¥...]

app.listen(port, () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${port}`);
  console.log(`üîó –î–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –æ—Ç–∫—Ä–æ–π—Ç–µ: http://localhost:${port}/api/debug/find-uuid`);
});