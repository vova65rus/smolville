const express = require('express');
const axios = require('axios');

const app = express();
const port = process.env.PORT || 3000;

app.use((req, res, next) => {
  res.header('Access-Control-Allow-Origin', '*');
  res.header('Access-Control-Allow-Methods', 'GET, POST, PUT, PATCH, DELETE, OPTIONS');
  res.header('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept, Authorization');
  if (req.method === 'OPTIONS') return res.sendStatus(200);
  next();
});

app.use(express.json());

// ==================== –ü–ï–†–ï–ú–ï–ù–ù–´–ï ====================

// –ü–û–ü–†–û–ë–£–ô–¢–ï –≠–¢–ò –í–ê–†–ò–ê–ù–¢–´ UUID:
const POSSIBLE_UUIDS = [
  '1e24960e-ac5a-43b6-8269-e6376b16577a', // —Å—Ç–∞—Ä—ã–π UUID
  '89387', // ID –∏–∑ URL workspace
  'Gf71',  // tid –∏–∑ URL
  '0000',  // vid –∏–∑ URL
  'Smolville' // –∏–º—è –±–∞–∑—ã
];

const SEATABLE_API_TOKEN = process.env.SEATABLE_API_TOKEN || '622c69aab356a1e53f3994f234c1e4a98f77f656';
const RADIKAL_API_KEY = process.env.RADIKAL_API_KEY;

// ==================== –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê ====================

app.get('/', (req, res) => {
  res.send(`
    <html>
      <head><title>SeaTable Diagnostic</title></head>
      <body>
        <h1>üîß SeaTable Diagnostic Tool</h1>
        <p>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:</p>
        <ul>
          <li><a href="/api/test-all">/api/test-all</a> - –¢–µ—Å—Ç –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö UUID</li>
          <li><a href="/api/create-token-guide">/api/create-token-guide</a> - –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é —Ç–æ–∫–µ–Ω–∞</li>
        </ul>
      </body>
    </html>
  `);
});

// –¢–µ—Å—Ç –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö UUID
app.get('/api/test-all', async (req, res) => {
  const results = [];
  
  for (const uuid of POSSIBLE_UUIDS) {
    try {
      console.log(`üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º UUID: ${uuid}`);
      
      const response = await axios.get(
        `https://cloud.seatable.io/api/v2.1/dtable/app-api/${uuid}/rows/?table_name=Events`,
        {
          headers: {
            'Authorization': `Token ${SEATABLE_API_TOKEN}`,
            'Content-Type': 'application/json'
          },
          timeout: 5000
        }
      );

      results.push({
        uuid: uuid,
        status: 'SUCCESS',
        statusCode: response.status,
        dataLength: response.data.rows ? response.data.rows.length : 0,
        message: '‚úÖ –†–ê–ë–û–¢–ê–ï–¢!'
      });
      
    } catch (error) {
      let errorInfo = {
        uuid: uuid,
        status: 'ERROR',
        error: error.message
      };

      if (error.response) {
        errorInfo.statusCode = error.response.status;
        if (error.response.data && typeof error.response.data === 'string' && error.response.data.includes('<!DOCTYPE html>')) {
          errorInfo.message = 'HTML response - –Ω–µ–≤–µ—Ä–Ω—ã–π UUID';
        } else {
          errorInfo.message = `HTTP ${error.response.status}`;
        }
      } else if (error.code === 'ECONNABORTED') {
        errorInfo.message = 'Timeout - –≤–æ–∑–º–æ–∂–Ω–æ –Ω–µ–≤–µ—Ä–Ω—ã–π API Token';
      }

      results.push(errorInfo);
    }
  }

  // –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  const workingUUIDs = results.filter(r => r.status === 'SUCCESS');
  
  res.json({
    summary: {
      tested: results.length,
      working: workingUUIDs.length,
      apiToken: SEATABLE_API_TOKEN ? `—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (${SEATABLE_API_TOKEN.substring(0, 8)}...)` : '–ù–ï–¢'
    },
    results: results,
    recommendations: workingUUIDs.length > 0 ? [
      `‚úÖ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ UUID: ${workingUUIDs[0].uuid}`,
      '–û–±–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é SEATABLE_BASE_UUID –≤ Render'
    ] : [
      '‚ùå –ù–∏ –æ–¥–∏–Ω UUID –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª',
      '1. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π API Token –¥–ª—è –±–∞–∑—ã Smolville',
      '2. –ù–∞–π–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π UUID —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å SeaTable',
      '3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é: /api/create-token-guide'
    ]
  });
});

// –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é API Token
app.get('/api/create-token-guide', (req, res) => {
  res.json({
    steps: [
      {
        step: 1,
        action: '–û—Ç–∫—Ä–æ–π—Ç–µ –±–∞–∑—É Smolville –≤ SeaTable',
        details: 'https://cloud.seatable.io/workspace/89387/dtable/Smolville/'
      },
      {
        step: 2, 
        action: '–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —à–µ—Å—Ç–µ—Ä–µ–Ω–∫—É (–ù–∞—Å—Ç—Ä–æ–π–∫–∏) –≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É',
        details: '–≠—Ç–æ –∏–∫–æ–Ω–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–∞–∑—ã'
      },
      {
        step: 3,
        action: '–í—ã–±–µ—Ä–∏—Ç–µ "–í–Ω–µ—à–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"',
        details: '–í –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫'
      },
      {
        step: 4,
        action: '–ù–∞–∂–º–∏—Ç–µ "API —Ç–æ–∫–µ–Ω"',
        details: '–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω –µ—Å–ª–∏ —Å—Ç–∞—Ä—ã–π –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç'
      },
      {
        step: 5,
        action: '–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω',
        details: '–ò –æ–±–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é SEATABLE_API_TOKEN –≤ Render'
      },
      {
        step: 6,
        action: '–ù–∞–π–¥–∏—Ç–µ UUID –±–∞–∑—ã',
        details: '–í –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –±–∞–∑—ã –∏–ª–∏ —á–µ—Ä–µ–∑ F12 ‚Üí Network'
      }
    ],
    current_token: SEATABLE_API_TOKEN ? `—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (${SEATABLE_API_TOKEN.substring(0, 8)}...)` : '–ù–ï–¢',
    troubleshooting: [
      '–ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç - —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π',
      '–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –≤—ã —Å–æ–∑–¥–∞–µ—Ç–µ —Ç–æ–∫–µ–Ω –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –±–∞–∑—ã (Smolville)',
      '–¢–æ–∫–µ–Ω –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –ø—Ä–∞–≤–∞ –Ω–∞ —á—Ç–µ–Ω–∏–µ –∏ –∑–∞–ø–∏—Å—å'
    ]
  });
});

// –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º UUID
app.get('/api/test-uuid/:uuid', async (req, res) => {
  const uuid = req.params.uuid;
  
  try {
    const response = await axios.get(
      `https://cloud.seatable.io/api/v2.1/dtable/app-api/${uuid}/rows/?table_name=Events`,
      {
        headers: {
          'Authorization': `Token ${SEATABLE_API_TOKEN}`,
          'Content-Type': 'application/json'
        },
        timeout: 5000
      }
    );

    res.json({
      success: true,
      uuid: uuid,
      statusCode: response.status,
      data: response.data,
      message: '‚úÖ –û—Ç–ª–∏—á–Ω–æ! –≠—Ç–æ—Ç UUID —Ä–∞–±–æ—Ç–∞–µ—Ç.'
    });
    
  } catch (error) {
    res.status(500).json({
      success: false,
      uuid: uuid,
      error: error.message,
      details: error.response ? {
        status: error.response.status,
        data: error.response.data
      } : null,
      message: '‚ùå –≠—Ç–æ—Ç UUID –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç.'
    });
  }
});

app.listen(port, () => {
  console.log(`üöÄ –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${port}`);
  console.log(`üîó –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:${port}/api/test-all`);
});