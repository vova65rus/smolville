const express = require('express');
const axios = require('axios');

const app = express();
const port = process.env.PORT || 3000;

app.use((req, res, next) => {
  res.header('Access-Control-Allow-Origin', '*');
  res.header('Access-Control-Allow-Methods', 'GET, POST, PUT, PATCH, DELETE, OPTIONS');
  res.header('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept, Authorization');
  if (req.method === 'OPTIONS') return res.sendStatus(200);
  next();
});

app.use(express.json());

const SEATABLE_API_TOKEN = process.env.SEATABLE_API_TOKEN || '622c69aab356a1e53f3994f234c1e4a98f77f656';

app.get('/', (req, res) => {
  res.send(`
    <html>
      <head><title>SeaTable UUID Finder</title></head>
      <body>
        <h1>üîç –ü–æ–∏—Å–∫ UUID –±–∞–∑—ã Smolville</h1>
        <p>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:</p>
        <ul>
          <li><a href="/api/find-uuid">/api/find-uuid</a> - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ UUID</li>
          <li><a href="/api/test-connection">/api/test-connection</a> - –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è</li>
        </ul>
      </body>
    </html>
  `);
});

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ UUID —á–µ—Ä–µ–∑ Account API
app.get('/api/find-uuid', async (req, res) => {
  try {
    console.log('üîç –ò—â–µ–º UUID –±–∞–∑—ã Smolville...');
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º Account Token –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –±–∞–∑
    const ACCOUNT_TOKEN = 'd146dc5b1b1fd51aafdbf5dbae1c00babf2f927d';
    
    // –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ endpoints –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –±–∞–∑
    const endpoints = [
      'https://cloud.seatable.io/api/v2.1/workspaces/',
      'https://cloud.seatable.io/api/v2.1/workspace/',
      'https://cloud.seatable.io/api/v2.1/admin/workspaces/',
      'https://cloud.seatable.io/api/v2.1/dtables/'
    ];

    let foundUUID = null;
    let workspaceData = null;

    for (const endpoint of endpoints) {
      try {
        console.log(`–ü—Ä–æ–±—É–µ–º endpoint: ${endpoint}`);
        const response = await axios.get(endpoint, {
          headers: {
            'Authorization': `Token ${ACCOUNT_TOKEN}`,
            'Content-Type': 'application/json'
          },
          timeout: 5000
        });

        workspaceData = response.data;
        console.log(`‚úÖ Endpoint —Å—Ä–∞–±–æ—Ç–∞–ª: ${endpoint}`);
        break;
      } catch (error) {
        console.log(`‚ùå Endpoint –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: ${endpoint} - ${error.message}`);
      }
    }

    if (!workspaceData) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ Account API');
    }

    // –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –±–∞–∑—É Smolville
    console.log('–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', JSON.stringify(workspaceData, null, 2));

    // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞
    if (workspaceData.workspaces) {
      for (const workspace of workspaceData.workspaces) {
        if (workspace.dtables) {
          const smolvilleBase = workspace.dtables.find(d => d.name === 'Smolville');
          if (smolvilleBase) {
            foundUUID = smolvilleBase.uuid;
            break;
          }
        }
      }
    }

    if (workspaceData.workspace_list && !foundUUID) {
      for (const workspace of workspaceData.workspace_list) {
        // –ü–æ–ª—É—á–∞–µ–º –±–∞–∑—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ workspace
        try {
          const dtablesResponse = await axios.get(
            `https://cloud.seatable.io/api/v2.1/workspace/${workspace.id}/dtables/`,
            {
              headers: {
                'Authorization': `Token ${ACCOUNT_TOKEN}`,
                'Content-Type': 'application/json'
              },
              timeout: 5000
            }
          );

          const smolvilleBase = dtablesResponse.data.find(d => d.name === 'Smolville');
          if (smolvilleBase) {
            foundUUID = smolvilleBase.uuid;
            break;
          }
        } catch (error) {
          console.log(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–∑—ã –¥–ª—è workspace ${workspace.id}`);
        }
      }
    }

    if (foundUUID) {
      // –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–π UUID —Å API —Ç–æ–∫–µ–Ω–æ–º
      try {
        const testResponse = await axios.get(
          `https://cloud.seatable.io/api/v2.1/dtable/app-api/${foundUUID}/rows/?table_name=Events`,
          {
            headers: {
              'Authorization': `Token ${SEATABLE_API_TOKEN}`,
              'Content-Type': 'application/json'
            },
            timeout: 5000
          }
        );

        res.json({
          success: true,
          message: '‚úÖ UUID –Ω–∞–π–¥–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å API —Ç–æ–∫–µ–Ω–æ–º!',
          baseUUID: foundUUID,
          testResult: {
            status: 'SUCCESS',
            tables: {
              events: testResponse.data.rows ? testResponse.data.rows.length : 0
            }
          },
          nextSteps: [
            `1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤ Render –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é: SEATABLE_BASE_UUID=${foundUUID}`,
            '2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è',
            '3. –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç - —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π API —Ç–æ–∫–µ–Ω'
          ]
        });

      } catch (testError) {
        res.json({
          success: true,
          message: '‚úÖ UUID –Ω–∞–π–¥–µ–Ω, –Ω–æ –Ω—É–∂–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ API —Ç–æ–∫–µ–Ω–∞',
          baseUUID: foundUUID,
          testResult: {
            status: 'ERROR',
            error: testError.message
          },
          recommendations: [
            '–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π API —Ç–æ–∫–µ–Ω –¥–ª—è –±–∞–∑—ã Smolville',
            `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ UUID: ${foundUUID}`,
            '–û–±–Ω–æ–≤–∏—Ç–µ SEATABLE_API_TOKEN –≤ Render'
          ]
        });
      }
    } else {
      // –ï—Å–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã
      res.json({
        success: false,
        message: '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–π—Ç–∏ UUID',
        alternativeMethods: [
          {
            method: '–ß–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –±—Ä–∞—É–∑–µ—Ä–∞',
            steps: [
              '1. –û—Ç–∫—Ä–æ–π—Ç–µ –±–∞–∑—É Smolville –≤ SeaTable',
              '2. –ù–∞–∂–º–∏—Ç–µ F12 ‚Üí –í–∫–ª–∞–¥–∫–∞ Network',
              '3. –û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É (F5)',
              '4. –ù–∞–π–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å—ã —Å "dtable" –≤ URL',
              '5. –í URL –±—É–¥–µ—Ç UUID –±–∞–∑—ã'
            ]
          },
          {
            method: '–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –±–∞–∑—É',
            steps: [
              '1. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –±–∞–∑—É –≤ SeaTable',
              '2. –ù–∞–∑–æ–≤–∏—Ç–µ –µ–µ "Smolville-New"',
              '3. –°–æ–∑–¥–∞–π—Ç–µ —Ç–∞–±–ª–∏—Ü—ã Events, Ads, Votings',
              '4. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π API —Ç–æ–∫–µ–Ω',
              '5. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏–º—è –±–∞–∑—ã –∫–∞–∫ UUID'
            ]
          }
        ]
      });
    }

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ UUID:', error.message);
    res.status(500).json({
      success: false,
      error: error.message,
      manualMethods: [
        '–ú–µ—Ç–æ–¥ 1: –ß–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä',
        '1. –û—Ç–∫—Ä–æ–π—Ç–µ –±–∞–∑—É Smolville ‚Üí F12 ‚Üí Network',
        '2. –ù–∞–π–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –∫ API (–∏—â–∏—Ç–µ "dtable" –≤ URL)',
        '3. UUID –±—É–¥–µ—Ç –≤ URL –∑–∞–ø—Ä–æ—Å–∞',
        '',
        '–ú–µ—Ç–æ–¥ 2: –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –±–∞–∑—É',
        '1. –ù–æ–≤–∞—è –±–∞–∑–∞ ‚Üí "Smolville-Test"',
        '2. –°–æ–∑–¥–∞–π—Ç–µ —Ç–∞–±–ª–∏—Ü—ã Events, Ads, Votings', 
        '3. –ù–æ–≤—ã–π API —Ç–æ–∫–µ–Ω',
        '4. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏–º—è –±–∞–∑—ã –∫–∞–∫ UUID'
      ]
    });
  }
});

// –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å –≤–æ–∑–º–æ–∂–Ω—ã–º–∏ UUID
app.get('/api/test-connection', async (req, res) => {
  const possibleUUIDs = [
    'Smolville',
    '89387',
    'Gf71', 
    '0000',
    'fc9ad3d2b00b40b5919efa7e58e68220'
  ];

  const results = [];

  for (const uuid of possibleUUIDs) {
    try {
      const response = await axios.get(
        `https://cloud.seatable.io/api/v2.1/dtable/app-api/${uuid}/rows/?table_name=Events`,
        {
          headers: {
            'Authorization': `Token ${SEATABLE_API_TOKEN}`,
            'Content-Type': 'application/json'
          },
          timeout: 5000
        }
      );

      results.push({
        uuid: uuid,
        status: 'SUCCESS',
        data: response.data.rows ? `${response.data.rows.length} –∑–∞–ø–∏—Å–µ–π` : '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö'
      });
    } catch (error) {
      results.push({
        uuid: uuid,
        status: 'ERROR',
        error: error.message
      });
    }
  }

  res.json({
    apiToken: SEATABLE_API_TOKEN ? `—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (${SEATABLE_API_TOKEN.substring(0, 8)}...)` : '–ù–ï–¢',
    results: results
  });
});

app.listen(port, () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –ø–æ–∏—Å–∫–∞ UUID –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${port}`);
  console.log(`üîó –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:${port}/api/find-uuid`);
});